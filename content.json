{"meta":{"title":"Have a nice day :)","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"所有标签","date":"2021-05-18T04:13:15.154Z","updated":"2021-05-18T04:13:15.150Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"我的小伙伴们","date":"2021-05-18T04:18:25.426Z","updated":"2021-05-18T04:18:25.417Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2021-05-18T04:13:20.150Z","updated":"2021-05-18T04:09:37.179Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"Hello~~"},{"title":"","date":"2021-05-18T04:31:47.538Z","updated":"2021-05-18T04:31:47.529Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面跑丢了 可能是输入已被删除或正在建设中～～"},{"title":"所有分类","date":"2021-05-18T04:13:48.386Z","updated":"2021-05-18T04:13:48.374Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2021-05-17T11:52:56.693Z","updated":"2021-05-17T11:52:56.693Z","comments":true,"path":"2021/05/17/hello-world/","link":"","permalink":"http://example.com/2021/05/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Java——基础知识（十三）——异常","slug":"Java——基础知识（十三）——异常","date":"2021-05-14T16:00:00.000Z","updated":"2021-05-16T16:00:00.000Z","comments":true,"path":"2021/05/15/Java——基础知识（十三）——异常/","link":"","permalink":"http://example.com/2021/05/15/Java%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8/","excerpt":"","text":"异常 Java将程序运行过程中的非正常情况封装成异常类，并通过异常处理机制对程序运行时发生的各种问题进行处理 两种常见异常类 Error(错误类)： 此类表示java运行时产生的系统内部错误或资源耗尽的错误，一般此类错误仅靠修改程序本身是不能被修复的，如系统崩溃 Exception(异常类)： 此类表示程序本身可以处理的错误，该类下除了RuntimeExpecption子类表示运行时错误外，其他子类都表示编译错误 异常的类型 编译异常 在程序编写过程中，Java编译器就会对程序进行检查，如果出现了比较明显的异常就必须对异常进行处理 处理方式：* 使用try…catch对异常进行捕获，使用throws关键字声明抛出异常，让调用者对其进行处理运行时异常： 在程序运行时由Java虚拟机自动捕获处理的，这种错误即使没有使用try…catch语句捕获或throws关键字声明抛出，程序也能编译通过，但是在运行时可能报错 常见的运行时异常 异常类名称 异常类说明 ArithmeticException 算数异常 IndexOutOfBoundException 角标越界异常 ClassCastException 类型转换异常 NullPointerException 空指针异常 NumberFormatException 数字格式化异常 try…catch语句和finally语句try…catch 当程序发生异常时会立即终止，这会影响开发效率，因此Java提供了一种对异常进行处理的方式——异常捕获 异常被try…catch捕获并处理后程序仍能正常向下执行！ try…catch语句的声明123456789try&#123; //可能发生异常的语句&#125;catch(Expection类或其子类 e)&#123; //对异常进行处理的语句&#125; try…catch语句的使用12345678910111213141516171819202122public class Main&#123; public static void main(String [] args) &#123; int x,y,z; x=1; y=0; try &#123; z=x/y; System.out.println(&quot;在发生异常的代码后方的代码是不执行的&quot;); &#125; catch(Exception e) &#123; System.out.println(&quot;除数不能为零&quot;); &#125; System.out.println(&quot;异常捕获后仍能继续运行&quot;); &#125;&#125; 输出 除数不能为零异常被捕获后仍能继续运行 注意： 通常用于确定的有可能出现异常的代码 在try中的代码出现异常时，程序会转而执行catch中的代码 在执行完catch中的代码之后程序仍会继续向下运行 在try中出现异常的代码的后方的代码是不会被执行的 finally 有时会希望某些语句不论程序是否发生异常都要执行，为此仅需在catch代码块的下方添加finally代码块即可 finally语句的声明12345678910111213try&#123; //可能发生异常的语句&#125;catch(Expection类或其子类 e)&#123; //对异常进行处理的语句&#125;finally&#123; //无论如何都要执行的语句&#125; finally语句的使用12345678910111213141516171819202122232425public class Main&#123; public static void main(String [] args) &#123; int x,y,z; x=1; y=0; try &#123; z=x/y; System.out.println(&quot;在发生异常的代码后方的代码是不执行的&quot;); &#125; catch(Exception e) &#123; System.out.println(&quot;除数不能为零&quot;); &#125; finally &#123; System.out.println(&quot;无论如何都要执行的语句&quot;); &#125; System.out.println(&quot;异常捕获后仍能继续运行&quot;); &#125;&#125; 输出 除数不能为零无论如何都要执行的语句异常捕获后仍能继续运行 throws关键字注意： 用在方法声明中，用于指明方法可能出现的多种异常 通常用于不确定某处代码是否出现异常或出现的异常并不急于处理 用于整个方法而不是某段代码块 可以一次性抛出多种异常 表现为在编译时报错 语法格式 用在方法声明的后面，throws的后面需要声明方法中发生的异常的类型 1234[修饰符]返回值类型 方法名([参数类型 参数名1 ...])throws 异常类1,异常类2...&#123; 方法的内容&#125; 123456789101112public class Main&#123; public static int f(int a,int b) throws Exception &#123; return a/b; &#125; public static void main(String [] args) &#123; System.out.printf(&quot;%d\\n&quot;,f(1,0)); &#125;&#125; 编译结果为提示第十行出错 如果去掉throws关键字则可以正常编译，但是运行时会出错 throw关键字 throws关键字用于方法，throw关键字用于方法体内的某个异常对象 需要与throws和try…catch搭配使用 提高了程序的可读性123456789101112131415161718192021222324public class Main&#123; public static int f(int a,int b) throws Exception &#123; if(b==0) throw new Exception(&quot;除数不能为零&quot;); int z=a/b; return a/b; &#125; public static void main(String [] args) &#123; try &#123; f(1,0); &#125; catch(Exception e) &#123; System.out.println(&quot;错误信息为：&quot;+e.getMessage()); &#125; &#125;&#125; 输出 错误信息为：除数不能为零","categories":[{"name":"日常","slug":"日常","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[]}],"categories":[{"name":"日常","slug":"日常","permalink":"http://example.com/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[]}